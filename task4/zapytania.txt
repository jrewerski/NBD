1.

match path = ShortestPath((n:town{name:"Darjeeling"})-[*]->(m:peak{name:"Sandakphu"})) Return path 

2.

match p = ShortestPath((n:town{name:"Darjeeling"})-[*]->(m:peak{name:"Sandakphu"}))  with p ,relationships(p) as rel where all ( r in rel where r.winter = "true") return p, rel

3.

match p = (source:town {name: "Darjeeling"})-[r*]->(target:peak {name: "Sandakphu"})
unwind r as rel
with p, COLLECT(rel.distance) as distances
with p, reduce(acc = 0, d in distances | acc + d) as distance
return p, distance
order by distance ASC

4.

match p = (source:town {name: "Darjeeling"})-[r:twowheeler*]->(target)
where all (r IN relationships(p) WHERE r.summer = "true")
return target

# nie ma

5.
match (f:Flight)-[:ORIGIN]->(a:Airport) with a, count(f) as flights return flights, a order by floghts desc 

6.
MATCH p = (origin:Airport {name: 'LAX'})<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..5]-(destination:Airport) where  REDUCE(s = 0, n IN [k IN RANGE(1, LENGTH(p), 2) | NODES(p)[k]] |
    s + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) < 3000 RETURN p

7.

MATCH p = (origin:Airport {name: 'LAX'})<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..5]-(destination:Airport{name:"DAY"} ) with p,  REDUCE(s = 0, n IN [k IN RANGE(1, LENGTH(p), 2) | NODES(p)[k]] |
    s + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price  RETURN p , price  
  
 # nie ma 

8.
 MATCH p = (origin:Airport {name: 'LAX'})<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..5]-(destination:Airport{name:"DAY"} ) with p,  REDUCE(s = 0, n IN [k IN RANGE(1, LENGTH(p), 2) | NODES(p)[k]] |
    s + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price  RETURN p , price  ORDER BY price asc LIMIT 1
  
 # nie ma 
9.
 
MATCH (a:Airport)<-[:ORIGIN]-(f:Flight)-[:DESTINATION]->(destination:Airport)
WITH [a.name, destination.name, f.airline] AS connection, f
RETURN f.airline AS airline, COUNT(DISTINCT connection) AS connections
ORDER BY connections desc

10

MATCH p = (a1:Airport)<-[r1:ORIGIN]-(f1:Flight)-[r2:DESTINATION]->(a2:Airport)<-[r3:ORIGIN]-(f2:Flight)-[r4:DESTINATION]->(a3:Airport)
WHERE not(a1=a2) AND not(a1=a3) AND not(a2=a3)
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | acc + [(n)<-[:ASSIGN]-(ticket {class: 'economy'}) | ticket.price][0]) as price
RETURN p, price
ORDER BY price asc LIMIT 1

